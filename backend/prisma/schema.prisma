generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-arm64-openssl-1.1.x"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Chain {
    id      String  @id @default(auto()) @map("_id") @db.ObjectId
    chainId String  @unique // Keep for external reference
    name    String  @unique
    stores  Store[]
}

model Store {
    id            String      @id @default(auto()) @map("_id") @db.ObjectId
    storeId       String // Keep for external reference
    name          String
    chain         Chain       @relation(fields: [chainObjectId], references: [id], onDelete: Cascade)
    chainObjectId String      @db.ObjectId // MongoDB ObjectId reference
    chainId       String // Keep for external reference
    address       String
    prices        ItemPrice[]
    city          String
    zipCode       String
    // productPromotions      ProductPromotion[]

    @@unique([chainId, storeId], name: "chainId_storeId")
    @@index([city])
}

model Item {
    id       String      @id @default(auto()) @map("_id") @db.ObjectId
    itemCode String      @unique // Keep for external reference
    name     String
    unit     String
    category String?
    brand    String?
    prices   ItemPrice[]
    // productPromotions ProductPromotion[]
}

model ItemPrice {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    itemId   String @db.ObjectId
    item     Item   @relation(fields: [itemId], references: [id])
    itemCode String // Keep for external reference

    storeObjectId String @db.ObjectId
    store         Store  @relation(fields: [storeObjectId], references: [id], onDelete: Cascade)
    storeId       String // Keep for external reference

    chainObjectId String   @db.ObjectId // MongoDB ObjectId reference
    chainId       String // Keep for external reference
    price         Float
    currency      String
    timestamp     DateTime

    @@unique([chainId, storeId, itemId, timestamp], name: "unique_price_entry")
    @@index([chainId, storeId, itemId])
}

// model ItemPromotion {
//     id       String @id @default(auto()) @map("_id") @db.ObjectId
//     itemId   String @db.ObjectId
//     item     Item   @relation(fields: [itemId], references: [id])
//     itemCode String // Keep for external reference

//     // Store and Chain information
//     storeObjectId String @db.ObjectId
//     store         Store  @relation(fields: [storeObjectId], references: [id], onDelete: Cascade)
//     storeId       String // Keep for external reference
//     chainObjectId String @db.ObjectId // MongoDB ObjectId reference
//     chainId       String // Keep for external reference

//     // Promotion details
//     promotionId           String
//     description           String
//     startDate             DateTime
//     endDate               DateTime
//     discountType          String // e.g., "percentage", "fixed", "buyXgetY"
//     discountRate          Float?
//     discountedPrice       Float?
//     minimumQuantity       Float
//     maximumQuantity       Float?
//     minimumPurchaseAmount Float?

//     // Promotion rules
//     allowMultipleDiscounts Boolean @default(false)
//     isWeightedPromotion    Boolean @default(false)
//     additionalRestrictions String?

//     // Metadata
//     lastUpdated DateTime @default(now())
//     timestamp   DateTime @default(now())

//     @@unique([chainId, storeId, itemId, promotionId], name: "unique_promotion")
// }
