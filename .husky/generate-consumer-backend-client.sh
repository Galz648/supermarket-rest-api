#!/bin/bash
set -e

# Colors for terminal output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Generating OpenAPI client for backend...${NC}"

# Ensure the backend is running to fetch the OpenAPI spec
if ! curl -s http://localhost:3000/api/docs-json > /dev/null; then
  echo -e "${YELLOW}Backend server not running. Starting it temporarily...${NC}"
  cd backend
  # Start the server in the background
  bun run start:dev &
  SERVER_PID=$!
  
  # Wait for the server to start
  echo -e "${YELLOW}Waiting for server to start...${NC}"
  until curl -s http://localhost:3000/api/docs-json > /dev/null; do
    sleep 2
  done
  
  # Fetch the OpenAPI spec
  echo -e "${YELLOW}Server started. Fetching OpenAPI spec...${NC}"
  cd ..
fi

# Create directories if they don't exist
mkdir -p shared/api-client

# Generate TypeScript types from OpenAPI spec
echo -e "${YELLOW}Generating TypeScript types...${NC}"
curl -s http://localhost:3000/api/docs-json > shared/api-client/openapi.json
bun openapi-typescript shared/api-client/openapi.json --output shared/api-client/schema.ts

# Generate fetch client
echo -e "${YELLOW}Generating fetch client...${NC}"
cat > shared/api-client/client.ts << EOF
// Auto-generated client for the backend API
// Do not edit this file manually

import { createFetch, Middleware } from 'openapi-typescript-fetch';
import type { paths } from './schema.js';

// Create fetch instance
export const fetcher = createFetch<paths>({
  baseUrl: process.env.API_BASE_URL || 'http://localhost:3000',
});

// Add middleware for authentication if needed
export const addAuthMiddleware = (token: string) => {
  const authMiddleware: Middleware = async (url, init, next) => {
    if (!init.headers) {
      init.headers = {};
    }
    init.headers['Authorization'] = \`Bearer \${token}\`;
    return next(url, init);
  };
  
  fetcher.use(authMiddleware);
};

// Example usage:
// import { fetcher } from './client.js';
// const getItems = fetcher.path('/items').method('get').create();
// const items = await getItems({});
EOF

echo -e "${GREEN}âœ… API client generated successfully!${NC}"

# If we started the server, shut it down
if [ -n "$SERVER_PID" ]; then
  echo -e "${YELLOW}Shutting down temporary server...${NC}"
  kill $SERVER_PID
  # Wait for the server to shut down
  wait $SERVER_PID 2>/dev/null || true
  echo -e "${GREEN}Server shut down.${NC}"
fi

# Make the script executable
chmod +x .husky/generate-consumer-backend-client.sh
